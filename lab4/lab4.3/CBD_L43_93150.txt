// Loading the csv adapting to neo4j

load csv with headers from 'file:///git_selection.csv' as file
merge (m: member{id:file.svn_id, name:file.real_name})
merge (p: project{name:file.project_name})
merge (m) -[:PARTICIPATED_IN{role:file.role_on_project}]-> (p)

// c)

#1
match (mbr: member) return distinct mbr;

#2
match (mbr:member) return distinct mbr.name;

#3
match (mbr:member)-[rel:PARTICIPATED_IN]->(proj:project) with rel, proj, count(mbr) as total_members where total_members >= 1 and rel.role <> "NA" return distinct proj as Project;

#4
match (mbr:member)-[rel:PARTICIPATED_IN]->(proj:project) where rel.role <> "NA" return mbr.name as Member, count(proj) as total_projects;

#5
match (mbr:member)-[rel:PARTICIPATED_IN]->(proj:project) where rel.role <> "NA" return mbr.name as Member, count(proj) as total_projects order by total_projects desc;

#6
match (mbr:member)-[rel:PARTICIPATED_IN]->(proj:project) return proj.name as Project, count(rel) as total_members; 

#7
match (mbr:member)-[rel:PARTICIPATED_IN]->(proj:project) where rel.role = "Committer" return proj.name as Project, rel.role as Role, count(rel) as total_members; 

#8
match (mbr1:member {id:"atm"})-[rel1:PARTICIPATED_IN]->(proj:project)<-[rel2:PARTICIPATED_IN]-(mbr2:member) return distinct mbr1.name as atm, mbr2.name as second_member, proj.name as Project;

#9
match (mbr1:member {id:"atm"})-[rel1:PARTICIPATED_IN]->(proj:project)<-[rel2:PARTICIPATED_IN]-(mbr2:member) where rel1.role = "PMC" and rel2.role = "Committer" return distinct mbr2.name as second_member, proj.name as Project;
